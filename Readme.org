#+TITLE: Emacs-Org

Docker image to build my projects using Emacs Org-mode.

* Install required packages
  :PROPERTIES:
  :header-args: :noweb-ref install
  :END:

  During docker image build.

** Initialize Emacs package

   #+BEGIN_SRC emacs-lisp
   (require 'package)
   (setq package-archives
         '(("melpa-stable" . "http://stable.melpa.org/packages/")
           ("melpa" . "https://melpa.org/packages/")
           ("org" . "http://orgmode.org/elpa/")))
   (package-initialize)
   (package-refresh-contents)
   #+END_SRC

** Org-mode

   #+BEGIN_SRC emacs-lisp
   (package-install 'org-plus-contrib)
   #+END_SRC

** Support code highlighting

   #+BEGIN_SRC emacs-lisp
   (package-install 'htmlize)
   #+END_SRC

** Rainbow delimiters

   #+BEGIN_SRC emacs-lisp
   (package-install 'rainbow-delimiters)
   #+END_SRC

** Languages support

   #+BEGIN_SRC emacs-lisp
   (package-install 'dockerfile-mode)
   (package-install 'json-mode)
   (package-install 'yaml-mode)
   #+END_SRC

* Common initialisation
  :PROPERTIES:
  :header-args: :noweb-ref init
  :END:

  Enable debug mode.
  #+BEGIN_SRC emacs-lisp
  (toggle-debug-on-error)
  #+END_SRC

  Initialize Emacs package.
  #+BEGIN_SRC emacs-lisp
  (require 'package)
  (package-initialize)
  #+END_SRC

  Load required packages.
  #+BEGIN_SRC emacs-lisp
  (require 'org)
  (require 'htmlize)
  (require 'rainbow-delimiters)
  (require 'dockerfile-mode)
  (require 'json-mode)
  (require 'yaml-mode)
  #+END_SRC

  Activate rainbow delimiters
  #+BEGIN_SRC emacs-lisp
  (with-eval-after-load 'rainbow-delimiters
    (add-hook 'prog-mode-hook #'rainbow-delimiters-mode))
  #+END_SRC

  Configure org languages.
  - use js-mode for jsx highlighting
  - do not prompt for confirmation on block evaluation
  - generate separate stylesheet
  #+BEGIN_SRC emacs-lisp
  (with-eval-after-load 'org
    (org-babel-do-load-languages
     'org-babel-load-languages
     '((shell . t)
       (js . t)
       (emacs-lisp . t)
       (clojure . t)
       (python . t)
       (ruby . t)
       (dot . t)
       (css . t)
       (plantuml . t)))
    (add-to-list 'org-src-lang-modes '("jsx" . js))
    (setq org-confirm-babel-evaluate nil)
    (setq org-html-htmlize-output-type 'css))
  #+END_SRC

  Load tangle & publish helper functions.
  #+BEGIN_SRC emacs-lisp
  (load-file "/root/.emacs.d/publish-all.el")
  (load-file "/root/.emacs.d/tangle-all.el")
  #+END_SRC

  Signals end of init script by printing Org version.
  #+BEGIN_SRC emacs-lisp
  (message (format "Org version: %s" (org-version)))
  #+END_SRC

* Tangle source code
  :PROPERTIES:
  :header-args: :noweb-ref tangle-all
  :END:

** Tangle all org files in a directory

   Tangle all the Org-mode files in the directory & recursively in child folders.
   Returns the list of tangled files.

   #+BEGIN_SRC emacs-lisp
   (defun tangle-all (directory)
     (mapcar (lambda (f)
	       (progn (message f)
		      (when (not (file-directory-p f))
			(org-babel-tangle-file f))))
	     (directory-files-recursive directory "\\.org$" 20)))
   #+END_SRC

** Recurse on files in directory

   List files in DIRECTORY and in its sub-directories.
   Return files that match the regular expression MATCH.
   Recurse only to depth MAXDEPTH. If zero or negative, then do not recurse

   #+BEGIN_SRC emacs-lisp
   (defun directory-files-recursive (directory match maxdepth)
     (let* ((files-list '())
            (current-directory-list
             (directory-files directory t)))
       ;; while we are in the current directory
       (while current-directory-list
         (let ((f (car current-directory-list)))
           (cond
            ((and
              (file-regular-p f)
              (file-readable-p f)
              (string-match match f))
             (setq files-list (cons f files-list)))
            ((and
              (file-directory-p f)
              (file-readable-p f)
              (not (string-equal ".." (substring f -2)))
              (not (string-equal "." (substring f -1)))
              (> maxdepth 0))
             ;; recurse only if necessary
             (setq files-list (append files-list (directory-files-recursive f match (- maxdepth -1))))
             (setq files-list (cons f files-list)))
            (t)))
         (setq current-directory-list (cdr current-directory-list)))
       files-list))
   #+END_SRC

* Publish HTML doc
  :PROPERTIES:
  :header-args: :noweb-ref publish-all
  :END:

** Publish all org file in a directory

   Helper function to publish all org files in a directory
   - title :: index page title.
   - base-dir :: directory including source org files.
   - publishing-dir :: where to put HTML doc files.

   #+BEGIN_SRC emacs-lisp :noweb yes
   (defun publish-all (title base-dir publishing-dir)
     (progn
       <<publish-settings>>
       (org-publish-all)))
   #+END_SRC

** Publish settings
   :PROPERTIES:
   :header-args: :noweb-ref publish-settings
   :END:

   Main publish settings.

   #+BEGIN_SRC emacs-lisp
   (setq org-publish-project-alist
         `(("doc-html"
            :base-directory ,base-dir
            ;; :base-extension "org"
            :publishing-directory ,publishing-dir
            :publishing-function org-html-publish-to-html
            ;; :html-extension "html"
            :section-numbers nil
            :recursive t
            :with-toc t
            :auto-sitemap t
            :sitemap-filename "index.org"
            :sitemap-title ,title
            :sitemap-function org-publish-org-sitemap
            :sitemap-format-entry org-publish-org-sitemap-format
            ;; :table-of-contents nil
            ;; :headline-levels 6
            ;; :body-only t
            )))
   #+END_SRC

   - do not check timestamp to publish only changed files.
   - highlight source blocks natively.
   - highlight source blocks with css classes instead of inline styles ([[https://emacs.stackexchange.com/questions/31439/how-to-get-colored-syntax-highlighting-of-code-blocks-in-asynchronous-org-mode-e][inline styles do not work in batch mode]]).

   #+BEGIN_SRC emacs-lisp
   (setq org-publish-use-timestamps-flag nil
         org-src-fontify-natively t
         org-html-htmlize-output-type 'css)
   #+END_SRC

** Generate sitemap file

   Sitemap generation function.

   #+BEGIN_SRC emacs-lisp
   (defun org-publish-org-sitemap (title list)
     (concat (format "#+TITLE: %s\n#+SETUPFILE: ./publish.setup\n\n" title)
             (org-list-to-subtree list)))
   #+END_SRC

** Generate sitemap entry

   Custom sitemap entry formatting.
   Make link relative to sitemap file.

   #+BEGIN_SRC emacs-lisp
   (defun org-publish-org-sitemap-format (entry style project)
     (cond ((not (directory-name-p entry))
            (format "[[file:./%s][%s]]"
                    entry
                    (org-publish-find-title entry project)))
           ((eq style 'tree)
            ;; Return only last subdir.
            (file-name-nondirectory (directory-file-name entry)))
           (t entry)))
   #+END_SRC

* Docker setup
  :PROPERTIES:
  :header-args: :noweb-ref docker-image
  :END:

  Base Emacs image.
  #+BEGIN_SRC dockerfile
  FROM iquiw/alpine-emacs as emacs
  RUN apk update && apk add git graphviz
  #+END_SRC

  Install packages.
  #+BEGIN_SRC dockerfile
  COPY elisp/install.el /root/.emacs.d/
  RUN emacs --batch -q -l "/root/.emacs.d/install.el"
  #+END_SRC

  Include elisp scripts used to build projects.
  #+BEGIN_SRC dockerfile
  COPY ./elisp/* /root/.emacs.d/
  #+END_SRC

  Prepare HTML themes for org.
  #+BEGIN_SRC dockerfile
  RUN git clone https://github.com/fniessen/org-html-themes.git
  #+END_SRC

  Include css theme usable by exported html files.
  #+BEGIN_SRC dockerfile
  COPY ./css/theme.css /root/
  #+END_SRC

* Files

** Install

   #+BEGIN_SRC emacs-lisp :tangle ./elisp/install.el :noweb yes :mkdirp yes
   (toggle-debug-on-error)
   <<install>>
   #+END_SRC

** Init

   #+BEGIN_SRC emacs-lisp :tangle ./elisp/init.el :noweb yes :mkdirp yes
   <<init>>
   #+END_SRC

** Tangle-all

   #+BEGIN_SRC emacs-lisp :tangle ./elisp/tangle-all.el :noweb yes :mkdirp yes
   <<tangle-all>>
   #+END_SRC

** Publish-all

   #+BEGIN_SRC emacs-lisp :tangle ./elisp/publish-all.el :noweb yes :mkdirp yes
   <<publish-all>>
   #+END_SRC


** Dockerfile

   #+BEGIN_SRC dockerfile :tangle ./Dockerfile :noweb yes :mkdirp yes
   <<docker-image>>
   #+END_SRC
