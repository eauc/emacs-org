#+TITLE: Emacs-Org

Docker image to build my projects using Emacs Org-mode.

* Install required packages
  :PROPERTIES:
  :header-args: :noweb-ref install
  :END:

  During docker image build.

** Initialize Emacs package

   #+BEGIN_SRC emacs-lisp
   (require 'package)
   ;; (add-to-list 'package-archives
   ;;              '("melpa-stable" . "http://stable.melpa.org/packages/") t)
   (add-to-list 'package-archives
                '("melpa" . "https://melpa.org/packages/"))
   (package-initialize)
   (package-refresh-contents)
   #+END_SRC

** Support code highlighting

   #+BEGIN_SRC emacs-lisp
   (unless (package-installed-p 'htmlize)
     (package-install 'htmlize))
   #+END_SRC

** Languages support

   #+BEGIN_SRC emacs-lisp
   ;; (unless (package-installed-p 'json-mode)
   ;;   (package-install 'json-mode))
   ;; (unless (package-installed-p 'js2-mode)
   ;;   (package-install 'js2-mode))
   ;; (unless (package-installed-p 'rjsx-mode)
   ;;   (package-install 'rjsx-mode))
   #+END_SRC

* Common initialisation
  :PROPERTIES:
  :header-args: :noweb-ref init
  :END:

  Enable debug mode.
  #+BEGIN_SRC emacs-lisp
  (toggle-debug-on-error)
  #+END_SRC

  Initialize Emacs package.
  #+BEGIN_SRC emacs-lisp
  (require 'package)
  (package-initialize)
  #+END_SRC

  Add recent Org-mode to load path (will supercede version of org included in Emacs).
  #+BEGIN_SRC emacs-lisp
  (add-to-list 'load-path "/home/emacs/org-9.1.9/lisp")
  (add-to-list 'load-path "/home/emacs/org-9.1.9/contrib/lisp")
  #+END_SRC

  Load required packages.
  #+BEGIN_SRC emacs-lisp
  (require 'org)
  (require 'htmlize)
  #+END_SRC

  Configure org languages.
  - custom mapping for jsx code blocks.
  #+BEGIN_SRC emacs-lisp
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((shell . t)
     (js . t)
     (emacs-lisp . t)
     (clojure . t)
     (python . t)
     (ruby . t)
     (dot . t)
     (css . t)
     (plantuml . t)))

  (add-to-list 'org-src-lang-modes '("jsx" . js))
  #+END_SRC

  Signals end of init script by printing Org version.
  #+BEGIN_SRC emacs-lisp
  (message (format "Org version: %s" (org-version)))
  #+END_SRC

* Tangle source code
  :PROPERTIES:
  :header-args: :noweb-ref tangle-all
  :END:

** Tangle all org files in a directory

   #+BEGIN_SRC emacs-lisp
   (defun tangle-all (directory)
     "Tangle all the Org-mode files in the directory of the file of the current buffer
      recursively in child folders. Returns the list of tangled files"
     (progn (message directory)
            (mapcar (lambda (f)
                      (progn (message f)
                             (when (not (file-directory-p f))
                               (org-babel-tangle-file f))))
                    (directory-files-recursive directory "\\.org$" 20))))
   #+END_SRC

** Recurse on files in directory

   #+BEGIN_SRC emacs-lisp
   (defun directory-files-recursive (directory match maxdepth)
     "List files in DIRECTORY and in its sub-directories.
    Return files that match the regular expression MATCH. Recurse only
    to depth MAXDEPTH. If zero or negative, then do not recurse"
     (let* ((files-list '())
            (current-directory-list
             (directory-files directory t)))
       ;; while we are in the current directory
       (while current-directory-list
         (let ((f (car current-directory-list)))
           (cond
            ((and
              (file-regular-p f)
              (file-readable-p f)
              (string-match match f))
             (setq files-list (cons f files-list)))
            ((and
              (file-directory-p f)
              (file-readable-p f)
              (not (string-equal ".." (substring f -2)))
              (not (string-equal "." (substring f -1)))
              (> maxdepth 0))
             ;; recurse only if necessary
             (setq files-list (append files-list (directory-files-recursive f match (- maxdepth -1))))
             (setq files-list (cons f files-list)))
            (t)))
         (setq current-directory-list (cdr current-directory-list)))
       files-list))
   #+END_SRC

* Publish HTML doc
  :PROPERTIES:
  :header-args: :noweb-ref publish-all
  :END:

** Publish all org file in a directory

   - title :: index page title.
   - base-dir :: directory including source org files.
   - publishing-dir :: where to put HTML doc files.

   #+BEGIN_SRC emacs-lisp :noweb yes
   (defun publish-all (title base-dir publishing-dir)
     "Helper function to publish all org files in a directory"
     (progn
       <<publish-settings>>
       (org-publish-all)))
   #+END_SRC

** Publish settings
   :PROPERTIES:
   :header-args: :noweb-ref publish-settings
   :END:

   Main publish settings.

   #+BEGIN_SRC emacs-lisp
   (setq org-publish-project-alist
         '(("doc-html"
            :base-directory base-dir
            :publishing-directory publishing-dir
            :publishing-function org-html-publish-to-html
            :section-numbers nil
            :recursive t
            :with-toc t
            :auto-sitemap t
            :sitemap-filename "index.org"
            :sitemap-title title
            :sitemap-function org-publish-org-sitemap
            :sitemap-format-entry org-publish-org-sitemap-format
            )))
   #+END_SRC

   - do not check timestamp to publish only changed files.
   - highlight source blocks natively.
   - highlight source blocks with css classes instead of inline styles.

   #+BEGIN_SRC emacs-lisp
   (setq org-publish-use-timestamps-flag nil
         org-src-fontify-natively t
         org-html-htmlize-output-type 'css)
   #+END_SRC

** Generate sitemap file

   #+BEGIN_SRC emacs-lisp
   (defun org-publish-org-sitemap (title list)
     "Sitemap generation function."
     (concat (format "#+TITLE: %s\n#+SETUPFILE: ./publish.setup\n\n" title)
             (org-list-to-subtree list)))
   #+END_SRC

** Generate sitemap entry

   Make link relative to sitemap file.

   #+BEGIN_SRC emacs-lisp
   (defun org-publish-org-sitemap-format (entry style project)
     "Custom sitemap entry formatting"
     (cond ((not (directory-name-p entry))
            (format "[[file:./%s][%s]]"
                    entry
                    (org-publish-find-title entry project)))
           ((eq style 'tree)
            ;; Return only last subdir.
            (file-name-nondirectory (directory-file-name entry)))
           (t entry)))
   #+END_SRC

* Docker setup

* Files

** Install

   #+BEGIN_SRC emacs-lisp :tangle ./elisp/install.el :noweb yes :mkdirp yes
   <<install>>
   #+END_SRC

** Init

   #+BEGIN_SRC emacs-lisp :tangle ./elisp/init.el :noweb yes :mkdirp yes
   <<init>>
   #+END_SRC

** Tangle-all

   #+BEGIN_SRC emacs-lisp :tangle ./elisp/tangle-all.el :noweb yes :mkdirp yes
   <<tangle-all>>
   #+END_SRC

** Publish-all

   #+BEGIN_SRC emacs-lisp :tangle ./elisp/publish-all.el :noweb yes :mkdirp yes
   <<publish-all>>
   #+END_SRC
